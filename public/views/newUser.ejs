<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Telemetry</title>

    <style>
        table {
            border-style: solid;
            border-color: black;
            border-width: 2px;
        }
        
        table th,
        td {
            width: 33%;
            text-align: center;
            padding: 0.5em;
        }
        
        tr:nth-child(odd) {
            background-color: rgb(201, 201, 201);
        }
    </style>
</head>

<body>
    <div>
        <h1>create new user</h1>
        <form>
            <label for="user">user</label>
            <input type="text" id="user" name="username" required>
            <label for="password">password</label>
            <input type="password" id="password" name="password" required>
            <label for="admin">admin rights:</label>
            <input type="checkbox" id="admin" name="admin" value="true">
            <button type="submit">submit</button>
        </form>
    </div>

    <div>
        <h1>delete user</h1>
        <table id="usersTable">
            <tr>
                <th>Username</th>
                <th>admin</th>
                <th>Delete</th>
                <th>Change password</th>

            </tr>
        </table>
    </div>


</body>

<script>
    window.onload = async() => {
        const table = document.querySelector('#usersTable');
        const query = `query Query {
                            users {
                                id
                                username
                                rights
                            }
                        }`;

        let users = await fetchGQL(query);
        users.data.users.forEach((user) => {
            const row = document.createElement('tr');

            row.innerHTML = `<td>${user.username}</td>
                            <td>${user.rights}</td>
                            <td><button type="button" id=${user.id} onclick="deleteUser(this.id)">Delete</td>
                            <td><button type="button" id=${user.id} onclick="changePassword(this.id)">change password</td>`;

            table.appendChild(row);
        });
    }


    const changePassword = async(id) => {
        const pwd = prompt('Insert new password');
        if (!pwd) return;

        const query = `mutation Mutation($changePasswordId: String!, $password: String!) {
                         changePassword(id: $changePasswordId, password: $password) {
                            username
                        }
                    }`;

        const variables = {
            changePasswordId: id,
            password: pwd
        }

        const result = await fetchGQL(query, variables);
        alert(`Changed password for user: "${result.data.changePassword.username}"!`);
    }

    async function deleteUser(id) {
        if (!confirm('Are you sure you want to delete user?')) return;
        console.log("poistetaan", id);
        const query = `mutation Mutation($deleteUserId: String!) {
                        deleteUser(id: $deleteUserId) {
                            username
                        }
                        }`;
        const variables = {
            deleteUserId: id
        };

        const result = await fetchGQL(query, variables);
        alert(`User "${result.data.deleteUser.username}" Deleted from database!`);
    }



    document.querySelector('form').addEventListener('submit', (event) => {
        event.preventDefault();
        const username = document.getElementById("user").value;
        const password = document.getElementById("password").value;
        const rights = document.getElementById("admin").checked;
        const query = `mutation Mutation($username: String, $password: String, $rights: Boolean) {
                            addUser(username: $username, password: $password, rights: $rights) 
                            {
                                id
                            }
                        }`;

        const variables = {
            "username": username,
            "password": password,
            "rights": rights
        };

        fetch('/graphql', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                },
                body: JSON.stringify({
                    query,
                    variables
                })
            })
            .then(r => r.json())
            .then(data => console.log('data returned:', data));
    })

    const fetchGQL = (query, variables) => {
        return new Promise((resolve) => {
            fetch('/graphql', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                    },
                    body: JSON.stringify({
                        query,
                        variables
                    })
                })
                .then(r => r.json())
                .then(data => {
                    resolve(data);
                });
        })
    }
</script>

</html>